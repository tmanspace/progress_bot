import telebot
import datetime as d

import config
import funcs as f
import static
import db


bot = telebot.TeleBot(config.TG_TOKEN)
main_menu = f.create_keyboard(static.start_markup, row_width=2)


@bot.message_handler(commands=['start'])
def welcome(message):
    bot.send_message(
        message.chat.id, '–ü—Ä–∏–≤–µ—Ç–∏–∫. –Ø –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ —É–º–µ—é, –Ω–æ —Å–∫–æ—Ä–æ –Ω–∞—É—á—É—Å—å!!', reply_markup=main_menu)


@bot.message_handler(func=lambda m: m.text == '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞')
def add_target(message):
    markup = f.create_keyboard(
        ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'], row_width=1, resize_keyboard=True)
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É:',
                     reply_markup=markup)
    bot.register_next_step_handler(message, add_task_name)


def add_task_name(message):
    if message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        bot.send_message(
            message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_menu)
    else:
        db.Task.create(user_id=message.chat.id, task_text=message.text)
        bot.send_message(
            message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª', reply_markup=main_menu)


@bot.message_handler(func=lambda m: m.text == '–°–ø–∏—Å–æ–∫ –¥–µ–ª')
def view_todo_list(message):
    query = db.Task.select().where(db.Task.task_date == d.datetime.date(
        d.datetime.today())).where(db.Task.user_id == message.chat.id)
    tasks_selected = query.dicts().execute()

    task_dict = {}
    for task in tasks_selected:
        key = str(int(task['done'])) + '_task_' + str(task['task_id'])
        if task['done']:
            task_dict[key] = '‚úÖ ' + task['task_text']
        else:
            task_dict[key] = '‚ùå ' + task['task_text']

    inline_markup = f.create_inline_keyboard(task_dict)
    bot.send_message(message.chat.id,
                     '<b>–í–∞—à —Å–ø–∏—Å–æ–∫ –¥–µ–ª –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n<i>–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É, —Ç–∫–Ω–∏—Ç–µ –≤ –Ω–µ–µ</i>',
                     reply_markup=inline_markup, parse_mode='html')


@bot.callback_query_handler(func=lambda q: q.data[2:6] == 'task')
def change_progress_task(query):
    sql_query = db.Task.update(done=not bool(int(query.data[0]))).where(
        db.Task.task_id == query.data[7:])
    sql_query.execute()

    query_1 = db.Task.select().where(db.Task.task_date == d.datetime.date(
        d.datetime.today())).where(db.Task.user_id == query.message.chat.id)
    tasks_selected = query_1.dicts().execute()

    task_dict = {}
    for task in tasks_selected:
        not_done = str(int(not int(query.data[0])))
        key = not_done + '_' + 'task_' + str(task['task_id'])
        if task['done']:
            task_dict[key] = '‚úÖ ' + task['task_text']
        else:
            task_dict[key] = '‚ùå ' + task['task_text']

    inline_markup = f.create_inline_keyboard(task_dict)

    bot.edit_message_reply_markup(message_id=query.message.message_id,
                                  chat_id=query.message.chat.id, reply_markup=inline_markup)


@bot.message_handler(func=lambda g: True)
def idk(m):
    bot.send_message(m.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—åü§∑')


bot.polling()
